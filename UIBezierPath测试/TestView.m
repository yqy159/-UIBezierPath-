//
//  TestView.m
//  UIBezierPath测试
//
//  Created by Yqy on 2018/3/25.
//  Copyright © 2018年 sgay. All rights reserved.
//

#import "TestView.h"

#define PathKey @"path"
#define PositionKey @"position"
#define PathDic(path,position) [NSDictionary dictionaryWithObjectsAndKeys:path,@"path",position,@"position", nil]

@interface TestView ()
@property (nonatomic, strong) NSMutableArray *pathArray;
@end
@implementation TestView

- (instancetype)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    if (self) {
        
        self.userInteractionEnabled = YES;
        UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(gestureAction:)];
        [self addGestureRecognizer:tap];
        self.backgroundColor = [UIColor redColor];
    }
    return self;
}

- (void)gestureAction:(UITapGestureRecognizer *)gesture {

    BOOL containsPoint = [self containsPoint:[gesture locationInView:self]];
    NSInteger tag = [self indexOfPoint:[gesture locationInView:self]];
    //如果是在有效点击区域内，执行方法
    if (containsPoint) {
        if (self.delegate && [self.delegate respondsToSelector:@selector(TestViewDidSelectView:withPosition:)]) {
            [self.delegate TestViewDidSelectView:self withPosition:[self GetPositionWithTag:tag]];
        }
    }
}

- (NSMutableArray *)pathArray {
    if (!_pathArray) {
        _pathArray = [NSMutableArray array];
    }
    return _pathArray;
}

- (void)drawRect:(CGRect)rect {
    // This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
    // http://www.paintcodeapp.com
    
    //// Color Declarations
    UIColor* color13 = [UIColor colorWithRed: 0.902 green: 0.902 blue: 0.902 alpha: 1];
    UIColor* color7 = [UIColor colorWithRed: 0.667 green: 0.667 blue: 0.667 alpha: 1];
    CGFloat color7RGBA[4];
    [color7 getRed: &color7RGBA[0] green: &color7RGBA[1] blue: &color7RGBA[2] alpha: &color7RGBA[3]];
    
    UIColor* color10 = [UIColor colorWithRed: (color7RGBA[0] * 0.5 + 0.5) green: (color7RGBA[1] * 0.5 + 0.5) blue: (color7RGBA[2] * 0.5 + 0.5) alpha: (color7RGBA[3] * 0.5 + 0.5)];
    UIColor* color8 = [UIColor colorWithRed: 0.08 green: 0.712 blue: 0.839 alpha: 1];
    
    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 300, 300)];
    [color13 setFill];
    [ovalPath fill];
    [color10 setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];
    
    
    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(10, 10, 280, 280)];
    [color13 setFill];
    [oval2Path fill];
    
    
    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPath];
    [oval3Path moveToPoint: CGPointMake(216.5, 208.5)];
    [oval3Path addCurveToPoint: CGPointMake(257.8, 238.1) controlPoint1: CGPointMake(243.7, 220.78) controlPoint2: CGPointMake(257.8, 238.1)];
    [oval3Path addCurveToPoint: CGPointMake(149, 290) controlPoint1: CGPointMake(231.22, 270.93) controlPoint2: CGPointMake(191.24, 290)];
    [oval3Path addLineToPoint: CGPointMake(149, 189)];
    [oval3Path addCurveToPoint: CGPointMake(216.5, 208.5) controlPoint1: CGPointMake(149, 189) controlPoint2: CGPointMake(189.3, 196.22)];
    [oval3Path closePath];
    [UIColor.whiteColor setFill];
    [oval3Path fill];
    [color10 setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];
    
    
    //// Oval 5 Drawing
    UIBezierPath* oval5Path = [UIBezierPath bezierPath];
    [oval5Path moveToPoint: CGPointMake(81.5, 208.5)];
    [oval5Path addCurveToPoint: CGPointMake(40.2, 238.1) controlPoint1: CGPointMake(54.3, 220.78) controlPoint2: CGPointMake(40.2, 238.1)];
    [oval5Path addCurveToPoint: CGPointMake(149, 290) controlPoint1: CGPointMake(66.78, 270.93) controlPoint2: CGPointMake(106.76, 290)];
    [oval5Path addLineToPoint: CGPointMake(149, 189)];
    [oval5Path addCurveToPoint: CGPointMake(81.5, 208.5) controlPoint1: CGPointMake(149, 189) controlPoint2: CGPointMake(108.7, 196.22)];
    [oval5Path closePath];
    [UIColor.whiteColor setFill];
    [oval5Path fill];
    [color10 setStroke];
    oval5Path.lineWidth = 1;
    [oval5Path stroke];
    
    
    //// Oval 6 Drawing
    CGRect oval6Rect = CGRectMake(10, 10, 280, 280);
    UIBezierPath* oval6Path = [UIBezierPath bezierPath];
    [oval6Path addArcWithCenter: CGPointMake(CGRectGetMidX(oval6Rect), CGRectGetMidY(oval6Rect)) radius: oval6Rect.size.width / 2 startAngle: -90 * M_PI/180 endAngle: -30 * M_PI/180 clockwise: YES];
    [oval6Path addLineToPoint: CGPointMake(CGRectGetMidX(oval6Rect), CGRectGetMidY(oval6Rect))];
    [oval6Path closePath];
    
    [UIColor.whiteColor setFill];
    [oval6Path fill];
    [color10 setStroke];
    oval6Path.lineWidth = 1;
    [oval6Path stroke];
    
    
    //// Oval 7 Drawing
    CGRect oval7Rect = CGRectMake(10, 10, 280, 280);
    UIBezierPath* oval7Path = [UIBezierPath bezierPath];
    [oval7Path addArcWithCenter: CGPointMake(CGRectGetMidX(oval7Rect), CGRectGetMidY(oval7Rect)) radius: oval7Rect.size.width / 2 startAngle: -150 * M_PI/180 endAngle: -90 * M_PI/180 clockwise: YES];
    [oval7Path addLineToPoint: CGPointMake(CGRectGetMidX(oval7Rect), CGRectGetMidY(oval7Rect))];
    [oval7Path closePath];
    
    [UIColor.whiteColor setFill];
    [oval7Path fill];
    [color10 setStroke];
    oval7Path.lineWidth = 1;
    [oval7Path stroke];
    
    
    //// Oval 8 Drawing
    UIBezierPath* oval8Path = [UIBezierPath bezierPath];
    [oval8Path moveToPoint: CGPointMake(271.24, 80)];
    [oval8Path addCurveToPoint: CGPointMake(271.24, 220) controlPoint1: CGPointMake(296.25, 123.32) controlPoint2: CGPointMake(296.25, 176.68)];
    [oval8Path addCurveToPoint: CGPointMake(244, 204) controlPoint1: CGPointMake(271.24, 220) controlPoint2: CGPointMake(270.31, 214.25)];
    [oval8Path addCurveToPoint: CGPointMake(166, 181) controlPoint1: CGPointMake(217.69, 193.75) controlPoint2: CGPointMake(189.75, 193.5)];
    [oval8Path addCurveToPoint: CGPointMake(150, 150) controlPoint1: CGPointMake(142.25, 168.5) controlPoint2: CGPointMake(150, 150)];
    [oval8Path addLineToPoint: CGPointMake(271.24, 80)];
    [oval8Path closePath];
    [UIColor.whiteColor setFill];
    [oval8Path fill];
    [color10 setStroke];
    oval8Path.lineWidth = 1;
    [oval8Path stroke];
    
    
    //// Oval 9 Drawing
    UIBezierPath* oval9Path = [UIBezierPath bezierPath];
    [oval9Path moveToPoint: CGPointMake(28.76, 80)];
    [oval9Path addCurveToPoint: CGPointMake(28.76, 220) controlPoint1: CGPointMake(3.75, 123.32) controlPoint2: CGPointMake(3.75, 176.68)];
    [oval9Path addCurveToPoint: CGPointMake(56, 204) controlPoint1: CGPointMake(28.76, 220) controlPoint2: CGPointMake(29.69, 214.25)];
    [oval9Path addCurveToPoint: CGPointMake(134, 181) controlPoint1: CGPointMake(82.31, 193.75) controlPoint2: CGPointMake(110.25, 193.5)];
    [oval9Path addCurveToPoint: CGPointMake(150, 150) controlPoint1: CGPointMake(157.75, 168.5) controlPoint2: CGPointMake(150, 150)];
    [oval9Path addLineToPoint: CGPointMake(28.76, 80)];
    [oval9Path closePath];
    [UIColor.whiteColor setFill];
    [oval9Path fill];
    [color10 setStroke];
    oval9Path.lineWidth = 1;
    [oval9Path stroke];
    
    
    //// Oval 4 Drawing
    UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(90, 90, 120, 120)];
    [color8 setFill];
    [oval4Path fill];
    
    
    //// Oval 10 Drawing
    UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(101, 261, 98, 39)];
    [color13 setFill];
    [oval10Path fill];
    
    
    //// Oval 11 Drawing
    UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(101, 268, 99, 62)];
    [UIColor.whiteColor setFill];
    [oval11Path fill];

    
    [self.pathArray addObjectsFromArray:@[PathDic(oval11Path, [NSNumber numberWithInteger:SelectButtonPosition_BottomCover]),
                                          PathDic(oval10Path, [NSNumber numberWithInteger:SelectButtonPosition_BottomCover]),
                                          PathDic(oval4Path,  [NSNumber numberWithInteger:SelectButtonPosition_Center]),
                                          PathDic(oval7Path,  [NSNumber numberWithInteger:SelectButtonPosition_TopLeft]),
                                          PathDic(oval6Path,  [NSNumber numberWithInteger:SelectButtonPosition_TopRight]),
                                          PathDic(oval9Path,  [NSNumber numberWithInteger:SelectButtonPosition_MiddleLeft]),
                                          PathDic(oval8Path,  [NSNumber numberWithInteger:SelectButtonPosition_MiddleRight]),
                                          PathDic(oval5Path,  [NSNumber numberWithInteger:SelectButtonPosition_BottomLeft]),
                                          PathDic(oval3Path,  [NSNumber numberWithInteger:SelectButtonPosition_BottomRight]),
                                         ]];
}

#pragma mark - 获取点在数组的位置
- (NSInteger)indexOfPoint:(CGPoint)point {
    for (NSDictionary *path in self.pathArray) {
        if ([[path objectForKey:PathKey] containsPoint:point]) {
            
            return [self.pathArray indexOfObject:path];
        }
    }
    return -1;
}

#pragma mark - 转换为SelectButtonPosition
- (SelectButtonPosition)GetPositionWithTag:(NSInteger)tag {
    NSDictionary *path = [self.pathArray objectAtIndex:tag];
    return [[path objectForKey:PositionKey] intValue];
}

#pragma mark - 判断点是否在曲线内
- (BOOL)containsPoint:(CGPoint)point {
    return ([self indexOfPoint:point] == -1 ? NO : YES);
}

@end
